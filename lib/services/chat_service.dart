// services/chat_service.dart
import 'package:socket_io_client/socket_io_client.dart' as IO;

class ChatService {
  static final ChatService _instance = ChatService._internal();
  factory ChatService() => _instance;
  ChatService._internal();

  IO.Socket? _socket;

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
  Function(int chatId, Map<String, dynamic> message)? onMessageReceived;
  Function(int chatId)? onChatEnded;
  Function(int chatId)? onChatArchived;

  // –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É
  void connect(String token, int userId) {
    try {
      print('üîÑ Connecting to Socket.IO server...');
      print('üì° URL: http://89.109.34.227:3000');
      print('üë§ User ID: $userId');

      _socket = IO.io(
        'http://89.109.34.227:3000',
        IO.OptionBuilder()
            .setQuery({'userId': userId.toString()})
            .setPath('/socket.io') // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å
            .setTransports(['websocket', 'polling'])
            .enableAutoConnect()
            .build(),
      );

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      _socket!.onConnect((_) {
        print('‚úÖ Socket.IO connected successfully');
        print('üîå Socket ID: ${_socket!.id}');
      });

      _socket!.onDisconnect((_) {
        print('‚ùå Socket.IO disconnected');
      });

      _socket!.onError((error) {
        print('üí• Socket.IO error: $error');
      });

      _socket!.onConnectError((error) {
        print('üö´ Socket.IO connect error: $error');
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      _socket!.on('newMessage', (data) {
        print('üì® Received new message: $data');
        if (onMessageReceived != null && data != null) {
          _handleIncomingMessage(data);
        }
      });

      // _socket!.on('chatEnded', (data) {
      //   print('üîö Chat ended: $data');
      //   if (onChatEnded != null && data is Map) {
      //     final chatId = _parseChatId(data);
      //     if (chatId != null) onChatEnded!(chatId);
      //   }
      // });

      // _socket!.on('chatArchivedDueToInactivity', (data) {
      //   print('üì¶ Chat archived: $data');
      //   if (onChatArchived != null && data is Map) {
      //     final chatId = _parseChatId(data);
      //     if (chatId != null) onChatArchived!(chatId);
      //   }
      // });

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      _socket!.connect();
    } catch (e) {
      print('üíÄ Socket.IO connection error: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
  void _handleIncomingMessage(dynamic data) {
    try {
      print('üîÑ Processing incoming message: $data');

      if (data is! Map) {
        print('‚ùå Invalid message format: $data');
        return;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map<dynamic, dynamic> –≤ Map<String, dynamic>
      final messageData = <String, dynamic>{};
      data.forEach((key, value) {
        messageData[key.toString()] = value;
      });

      print('üìù Parsed message data: $messageData');

      final chatId = _parseChatId(messageData);
      if (chatId != null && onMessageReceived != null) {
        print('‚úÖ Dispatching message to chat $chatId');
        onMessageReceived!(chatId, messageData);
      } else {
        print('‚ùå Could not parse chatId from: $messageData');
      }
    } catch (e) {
      print('üíÄ Error handling incoming message: $e');
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ chatId –∏–∑ –¥–∞–Ω–Ω—ã—Ö
  int? _parseChatId(Map<String, dynamic> data) {
    try {
      final chatId = data['chatId'];
      print('üîç Parsing chatId: $chatId (type: ${chatId.runtimeType})');

      if (chatId is int) return chatId;
      if (chatId is String) return int.tryParse(chatId);
      if (chatId is double) return chatId.toInt();
      return null;
    } catch (e) {
      print('üíÄ Error parsing chatId: $e');
      return null;
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É
  void joinChat(int chatId) {
    print('üöÄ Joining chat: $chatId');
    _socket?.emit(
      'joinChat',
      chatId,
    ); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º HTML
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  void sendMessage(int chatId, String text) {
    if (text.trim().isNotEmpty) {
      final messageData = {'chatId': chatId, 'text': text.trim()};
      print('üì§ Sending message: $messageData');
      _socket?.emit('sendMessage', messageData);
    }
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç
  void endChat(int chatId) {
    print('üõë Ending chat: $chatId');
    _socket?.emit(
      'endChat',
      chatId,
    ); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º HTML
  }

  void disconnect() {
    print('üëã Disconnecting Socket.IO');
    _socket?.disconnect();
    _socket?.clearListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  bool get isConnected => _socket?.connected ?? false;

  // –ü–æ–ª—É—á–∏—Ç—å ID —Å–æ–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  String? get socketId => _socket?.id;
}
