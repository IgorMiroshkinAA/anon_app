import 'dart:ffi';
import 'package:flutter/material.dart';
import 'package:flutter_application/services/chat_service.dart';
import '../models/user_registration.dart';
import '../services/auth_service.dart';
import '../models/chat_data.dart';

class UserProvider extends ChangeNotifier {
  final UserRegistration _user = UserRegistration(id: 0);
  String? _tempToken;
  String? _finalToken;
  final ChatService _chatService = ChatService();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —á–∞—Ç–æ–≤
  List<ChatData> _activeChats = [];
  List<ChatData> _archiveChats = [];
  List<ChatData> _requestChats = [];

  List<ChatData> get activeChats => _activeChats;
  List<ChatData> get archiveChats => _archiveChats;
  List<ChatData> get requestChats => _requestChats;

  UserRegistration get user => _user;
  String? get finalToken => _finalToken;

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –Ω–∞ email
  Future<void> requestCode(String email) async {
    _tempToken = await AuthService.requestCode(email);
    _user.email = email;
    notifyListeners();
  }

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–¥ –Ω–∞ email (–í—ã—à–ª–æ –≤—Ä–µ–º—è)
  Future<void> resendCode(String email) async {
    _tempToken = await AuthService.resendCode(email);
    _user.email = email;
    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥
  Future<void> verifyCode(String code) async {
    if (_tempToken == null) throw Exception('Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    _finalToken = await AuthService.verifyCode(_tempToken!, code); // ‚úÖ accessToken
  }


  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º, –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
  Future<void> setNickname(String nickname) async {
    if (_finalToken == null) throw Exception('AccessToken –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    _finalToken = await AuthService.setNickname(_finalToken!, nickname); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    _user.name = nickname;
    notifyListeners();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç
  Future<void> setAge(int age) async {
    if (_finalToken == null) throw Exception('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç');
    await AuthService.setAge(_finalToken!, age);
    _user.age = age;
    notifyListeners();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
  Future<void> setPassword(String password, String confirm) async {
    if (_finalToken == null) throw Exception('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    _finalToken = await AuthService.setPassword(
      _finalToken!,
      password,
      confirm,
    );
    _finalToken = finalToken;
    _user.password = password;
    notifyListeners();
  }

  // –í—ã—Ö–æ–¥
  void logout() {
    _finalToken = null;
    _tempToken = null;
    _user.reset();
    _activeChats.clear();
    _archiveChats.clear();
    _requestChats.clear();
    notifyListeners();
  }

  Future<void> _loadChats() async {
    if (_finalToken == null) throw Exception('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
      final activeChatsData = await AuthService.getActiveChats(_finalToken!);
      _activeChats = _parseChatsFromData(activeChatsData);

      final archiveChats = await AuthService.getArchiveChats(_finalToken!);
      _archiveChats = _parseChatsFromData(archiveChats);

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∞—Ä—Ö–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      // _archiveChats = await AuthService.getArchiveChats(_finalToken!);
      // _requestChats = await AuthService.getRequestChats(_finalToken!);

      notifyListeners();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e');
      throw e;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ API
  List<ChatData> _parseChatsFromData(List<dynamic> chatsData) {
    return chatsData.map((chatData) {
      final userId = chatData['user1Id'] == _user.id
          ? chatData['user2Id']
          : chatData['user1Id'];

      return ChatData(
        userId: userId,
        avatarUrl: chatData['avatarUrl'] ?? 'assets/images/accGray.png',
        name: chatData['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
        lastMessage: chatData['lastMessage'] ?? '',
        lastMessageTime: chatData['lastMessageTime'] ?? '',
        timerLabel: chatData['timerLabel'] ?? '',
        newMessagesCount: chatData['newMessagesCount'] ?? 0,
        isRead: chatData['isRead'] ?? false,
        isOnline: chatData['isOnline'] ?? false,
        isRepeatRequest: chatData['isRepeatRequest'] ?? false,
      );
    }).toList();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  Future<void> refreshChats() async {
    await _loadChats();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  void addChat(
    ChatData chat, {
    bool isArchive = false,
    bool isRequest = false,
  }) {
    if (isRequest) {
      _requestChats.add(chat);
    } else if (isArchive) {
      _archiveChats.add(chat);
    } else {
      _activeChats.add(chat);
    }
    notifyListeners();
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
  void removeChat(
    int userId, {
    bool isArchive = false,
    bool isRequest = false,
  }) {
    if (isRequest) {
      _requestChats.removeWhere((chat) => chat.userId == userId);
    } else if (isArchive) {
      _archiveChats.removeWhere((chat) => chat.userId == userId);
    } else {
      _activeChats.removeWhere((chat) => chat.userId == userId);
    }
    notifyListeners();
  }

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –∞—Ä—Ö–∏–≤
  void moveToArchive(int userId) {
    final chat = _activeChats.firstWhere((chat) => chat.userId == userId);
    _activeChats.removeWhere((chat) => chat.userId == userId);
    _archiveChats.add(chat);
    notifyListeners();
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
  void restoreFromArchive(int userId) {
    final chat = _archiveChats.firstWhere((chat) => chat.userId == userId);
    _archiveChats.removeWhere((chat) => chat.userId == userId);
    _activeChats.add(chat);
    notifyListeners();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
  void updateChat(
    ChatData updatedChat, {
    bool isArchive = false,
    bool isRequest = false,
  }) {
    List<ChatData> targetList;

    if (isRequest) {
      targetList = _requestChats;
    } else if (isArchive) {
      targetList = _archiveChats;
    } else {
      targetList = _activeChats;
    }

    final index = targetList.indexWhere(
      (chat) => chat.userId == updatedChat.userId,
    );
    if (index != -1) {
      targetList[index] = updatedChat;
      notifyListeners();
    }
  }

  Future<void> selectPlan(int planId) async {
    if (_finalToken == null) throw Exception('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

    try {
      await AuthService.selectPlan(_finalToken!, planId);
      _user.levelSubscription = planId;
      notifyListeners();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞: $e');
    }
  }

  int get activePlanId => _user.levelSubscription ?? 1;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
  Future<String?> login(String email, String password) async {
    if (email == "login") {
      email = _user.email!;
    }
    _finalToken = await AuthService.login(email, password);

    if (_finalToken == "registration" || _finalToken == "login") {
      _user.email = email;
      return _finalToken;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final userData = await AuthService.getUser(_finalToken);
    final user = userData['user'];
    _user.id = user['id'];
    _user.email = user['email'];
    _user.name = user['nickname'];
    _user.age = user['age'];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å userId
    _initializeChatService();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    await _loadChats();

    notifyListeners();
    return null;
  }

  void _initializeChatService() {
    if (_finalToken != null && _user.id! > 0) {
      _chatService.connect(_finalToken!, _user.id!);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      _chatService.onMessageReceived = _handleNewMessage;
      _chatService.onChatEnded = _handleChatEnded;
      _chatService.onChatArchived = _handleChatArchived;
    }
  }

  void _handleNewMessage(int chatId, Map<String, dynamic> messageData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    print('New message in chat $chatId: ${messageData['text']}');

    // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã
    _loadChats(); // –∏–ª–∏ –±–æ–ª–µ–µ —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    notifyListeners();
  }

  void _handleChatEnded(int chatId) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
    print('Chat $chatId ended');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    _loadChats();
    notifyListeners();
  }

  void _handleChatArchived(int chatId) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ –ø–æ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—é
    print('Chat $chatId archived due to inactivity');
    _loadChats();
    notifyListeners();
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ —á–∞—Ç–∞)
  void joinChat(int chatId) {
    print('üîó UserProvider: Joining chat $chatId');
    _chatService.joinChat(chatId);
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  void sendMessage(int chatId, String text) {
    print('üí¨ UserProvider: Sending message to chat $chatId: "$text"');
    _chatService.sendMessage(chatId, text);
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç
  void endChat(int chatId) {
    _chatService.endChat(chatId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä ChatService –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  ChatService get chatService => _chatService;

  @override
  void dispose() {
    _chatService.disconnect();
    super.dispose();
  }
}
